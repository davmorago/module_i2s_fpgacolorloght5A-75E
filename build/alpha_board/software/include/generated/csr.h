//--------------------------------------------------------------------------------
// Auto-generated by LiteX (02277680) on 2023-12-03 11:55:13
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif

/* i2s_ver */
#define CSR_I2S_VER_BASE (CSR_BASE + 0x0L)
#define CSR_I2S_VER_BUSY_ADDR (CSR_BASE + 0x0L)
#define CSR_I2S_VER_BUSY_SIZE 1
static inline uint32_t i2s_ver_busy_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
#define CSR_I2S_VER_DTA_ADDR (CSR_BASE + 0x4L)
#define CSR_I2S_VER_DTA_SIZE 1
static inline uint32_t i2s_ver_dta_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void i2s_ver_dta_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
#define CSR_I2S_VER_INIT_ADDR (CSR_BASE + 0x8L)
#define CSR_I2S_VER_INIT_SIZE 1
static inline uint32_t i2s_ver_init_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}
static inline void i2s_ver_init_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8L));
}
#define CSR_I2S_VER_EV_STATUS_ADDR (CSR_BASE + 0xcL)
#define CSR_I2S_VER_EV_STATUS_SIZE 1
static inline uint32_t i2s_ver_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xcL));
}
#define CSR_I2S_VER_EV_STATUS_OK_OFFSET 0
#define CSR_I2S_VER_EV_STATUS_OK_SIZE 1
static inline uint32_t i2s_ver_ev_status_ok_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t i2s_ver_ev_status_ok_read(void) {
	uint32_t word = i2s_ver_ev_status_read();
	return i2s_ver_ev_status_ok_extract(word);
}
#define CSR_I2S_VER_EV_PENDING_ADDR (CSR_BASE + 0x10L)
#define CSR_I2S_VER_EV_PENDING_SIZE 1
static inline uint32_t i2s_ver_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x10L));
}
static inline void i2s_ver_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10L));
}
#define CSR_I2S_VER_EV_PENDING_OK_OFFSET 0
#define CSR_I2S_VER_EV_PENDING_OK_SIZE 1
static inline uint32_t i2s_ver_ev_pending_ok_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t i2s_ver_ev_pending_ok_read(void) {
	uint32_t word = i2s_ver_ev_pending_read();
	return i2s_ver_ev_pending_ok_extract(word);
}
static inline uint32_t i2s_ver_ev_pending_ok_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void i2s_ver_ev_pending_ok_write(uint32_t plain_value) {
	uint32_t oldword = i2s_ver_ev_pending_read();
	uint32_t newword = i2s_ver_ev_pending_ok_replace(oldword, plain_value);
	i2s_ver_ev_pending_write(newword);
}
#define CSR_I2S_VER_EV_ENABLE_ADDR (CSR_BASE + 0x14L)
#define CSR_I2S_VER_EV_ENABLE_SIZE 1
static inline uint32_t i2s_ver_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x14L));
}
static inline void i2s_ver_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x14L));
}
#define CSR_I2S_VER_EV_ENABLE_OK_OFFSET 0
#define CSR_I2S_VER_EV_ENABLE_OK_SIZE 1
static inline uint32_t i2s_ver_ev_enable_ok_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t i2s_ver_ev_enable_ok_read(void) {
	uint32_t word = i2s_ver_ev_enable_read();
	return i2s_ver_ev_enable_ok_extract(word);
}
static inline uint32_t i2s_ver_ev_enable_ok_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void i2s_ver_ev_enable_ok_write(uint32_t plain_value) {
	uint32_t oldword = i2s_ver_ev_enable_read();
	uint32_t newword = i2s_ver_ev_enable_ok_replace(oldword, plain_value);
	i2s_ver_ev_enable_write(newword);
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x804L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x808L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}

/* ethmac */
#define CSR_ETHMAC_BASE (CSR_BASE + 0x1000L)
#define CSR_ETHMAC_SRAM_WRITER_SLOT_ADDR (CSR_BASE + 0x1000L)
#define CSR_ETHMAC_SRAM_WRITER_SLOT_SIZE 1
static inline uint32_t ethmac_sram_writer_slot_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_ADDR (CSR_BASE + 0x1004L)
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_SIZE 1
static inline uint32_t ethmac_sram_writer_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004L));
}
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_ADDR (CSR_BASE + 0x1008L)
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_SIZE 1
static inline uint32_t ethmac_sram_writer_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x1008L));
}
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_ADDR (CSR_BASE + 0x100cL)
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_SIZE 1
static inline uint32_t ethmac_sram_writer_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x100cL));
}
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_AVAILABLE_OFFSET 0
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_AVAILABLE_SIZE 1
static inline uint32_t ethmac_sram_writer_ev_status_available_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethmac_sram_writer_ev_status_available_read(void) {
	uint32_t word = ethmac_sram_writer_ev_status_read();
	return ethmac_sram_writer_ev_status_available_extract(word);
}
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_ADDR (CSR_BASE + 0x1010L)
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_SIZE 1
static inline uint32_t ethmac_sram_writer_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010L));
}
static inline void ethmac_sram_writer_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010L));
}
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_AVAILABLE_OFFSET 0
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_AVAILABLE_SIZE 1
static inline uint32_t ethmac_sram_writer_ev_pending_available_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethmac_sram_writer_ev_pending_available_read(void) {
	uint32_t word = ethmac_sram_writer_ev_pending_read();
	return ethmac_sram_writer_ev_pending_available_extract(word);
}
static inline uint32_t ethmac_sram_writer_ev_pending_available_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ethmac_sram_writer_ev_pending_available_write(uint32_t plain_value) {
	uint32_t oldword = ethmac_sram_writer_ev_pending_read();
	uint32_t newword = ethmac_sram_writer_ev_pending_available_replace(oldword, plain_value);
	ethmac_sram_writer_ev_pending_write(newword);
}
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_ADDR (CSR_BASE + 0x1014L)
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_SIZE 1
static inline uint32_t ethmac_sram_writer_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x1014L));
}
static inline void ethmac_sram_writer_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1014L));
}
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_AVAILABLE_OFFSET 0
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_AVAILABLE_SIZE 1
static inline uint32_t ethmac_sram_writer_ev_enable_available_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethmac_sram_writer_ev_enable_available_read(void) {
	uint32_t word = ethmac_sram_writer_ev_enable_read();
	return ethmac_sram_writer_ev_enable_available_extract(word);
}
static inline uint32_t ethmac_sram_writer_ev_enable_available_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ethmac_sram_writer_ev_enable_available_write(uint32_t plain_value) {
	uint32_t oldword = ethmac_sram_writer_ev_enable_read();
	uint32_t newword = ethmac_sram_writer_ev_enable_available_replace(oldword, plain_value);
	ethmac_sram_writer_ev_enable_write(newword);
}
#define CSR_ETHMAC_SRAM_READER_START_ADDR (CSR_BASE + 0x1018L)
#define CSR_ETHMAC_SRAM_READER_START_SIZE 1
static inline uint32_t ethmac_sram_reader_start_read(void) {
	return csr_read_simple((CSR_BASE + 0x1018L));
}
static inline void ethmac_sram_reader_start_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1018L));
}
#define CSR_ETHMAC_SRAM_READER_READY_ADDR (CSR_BASE + 0x101cL)
#define CSR_ETHMAC_SRAM_READER_READY_SIZE 1
static inline uint32_t ethmac_sram_reader_ready_read(void) {
	return csr_read_simple((CSR_BASE + 0x101cL));
}
#define CSR_ETHMAC_SRAM_READER_LEVEL_ADDR (CSR_BASE + 0x1020L)
#define CSR_ETHMAC_SRAM_READER_LEVEL_SIZE 1
static inline uint32_t ethmac_sram_reader_level_read(void) {
	return csr_read_simple((CSR_BASE + 0x1020L));
}
#define CSR_ETHMAC_SRAM_READER_SLOT_ADDR (CSR_BASE + 0x1024L)
#define CSR_ETHMAC_SRAM_READER_SLOT_SIZE 1
static inline uint32_t ethmac_sram_reader_slot_read(void) {
	return csr_read_simple((CSR_BASE + 0x1024L));
}
static inline void ethmac_sram_reader_slot_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1024L));
}
#define CSR_ETHMAC_SRAM_READER_LENGTH_ADDR (CSR_BASE + 0x1028L)
#define CSR_ETHMAC_SRAM_READER_LENGTH_SIZE 1
static inline uint32_t ethmac_sram_reader_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x1028L));
}
static inline void ethmac_sram_reader_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1028L));
}
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_ADDR (CSR_BASE + 0x102cL)
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_SIZE 1
static inline uint32_t ethmac_sram_reader_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x102cL));
}
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_EVENT0_OFFSET 0
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_EVENT0_SIZE 1
static inline uint32_t ethmac_sram_reader_ev_status_event0_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethmac_sram_reader_ev_status_event0_read(void) {
	uint32_t word = ethmac_sram_reader_ev_status_read();
	return ethmac_sram_reader_ev_status_event0_extract(word);
}
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_ADDR (CSR_BASE + 0x1030L)
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_SIZE 1
static inline uint32_t ethmac_sram_reader_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x1030L));
}
static inline void ethmac_sram_reader_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1030L));
}
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_EVENT0_OFFSET 0
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_EVENT0_SIZE 1
static inline uint32_t ethmac_sram_reader_ev_pending_event0_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethmac_sram_reader_ev_pending_event0_read(void) {
	uint32_t word = ethmac_sram_reader_ev_pending_read();
	return ethmac_sram_reader_ev_pending_event0_extract(word);
}
static inline uint32_t ethmac_sram_reader_ev_pending_event0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ethmac_sram_reader_ev_pending_event0_write(uint32_t plain_value) {
	uint32_t oldword = ethmac_sram_reader_ev_pending_read();
	uint32_t newword = ethmac_sram_reader_ev_pending_event0_replace(oldword, plain_value);
	ethmac_sram_reader_ev_pending_write(newword);
}
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_ADDR (CSR_BASE + 0x1034L)
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_SIZE 1
static inline uint32_t ethmac_sram_reader_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x1034L));
}
static inline void ethmac_sram_reader_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1034L));
}
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_EVENT0_OFFSET 0
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_EVENT0_SIZE 1
static inline uint32_t ethmac_sram_reader_ev_enable_event0_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethmac_sram_reader_ev_enable_event0_read(void) {
	uint32_t word = ethmac_sram_reader_ev_enable_read();
	return ethmac_sram_reader_ev_enable_event0_extract(word);
}
static inline uint32_t ethmac_sram_reader_ev_enable_event0_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ethmac_sram_reader_ev_enable_event0_write(uint32_t plain_value) {
	uint32_t oldword = ethmac_sram_reader_ev_enable_read();
	uint32_t newword = ethmac_sram_reader_ev_enable_event0_replace(oldword, plain_value);
	ethmac_sram_reader_ev_enable_write(newword);
}
#define CSR_ETHMAC_PREAMBLE_CRC_ADDR (CSR_BASE + 0x1038L)
#define CSR_ETHMAC_PREAMBLE_CRC_SIZE 1
static inline uint32_t ethmac_preamble_crc_read(void) {
	return csr_read_simple((CSR_BASE + 0x1038L));
}
#define CSR_ETHMAC_RX_DATAPATH_PREAMBLE_ERRORS_ADDR (CSR_BASE + 0x103cL)
#define CSR_ETHMAC_RX_DATAPATH_PREAMBLE_ERRORS_SIZE 1
static inline uint32_t ethmac_rx_datapath_preamble_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x103cL));
}
#define CSR_ETHMAC_RX_DATAPATH_CRC_ERRORS_ADDR (CSR_BASE + 0x1040L)
#define CSR_ETHMAC_RX_DATAPATH_CRC_ERRORS_SIZE 1
static inline uint32_t ethmac_rx_datapath_crc_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x1040L));
}

/* ethphy */
#define CSR_ETHPHY_BASE (CSR_BASE + 0x1800L)
#define CSR_ETHPHY_CRG_RESET_ADDR (CSR_BASE + 0x1800L)
#define CSR_ETHPHY_CRG_RESET_SIZE 1
static inline uint32_t ethphy_crg_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
static inline void ethphy_crg_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1800L));
}
#define CSR_ETHPHY_RX_INBAND_STATUS_ADDR (CSR_BASE + 0x1804L)
#define CSR_ETHPHY_RX_INBAND_STATUS_SIZE 1
static inline uint32_t ethphy_rx_inband_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x1804L));
}
#define CSR_ETHPHY_RX_INBAND_STATUS_LINK_STATUS_OFFSET 0
#define CSR_ETHPHY_RX_INBAND_STATUS_LINK_STATUS_SIZE 1
static inline uint32_t ethphy_rx_inband_status_link_status_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethphy_rx_inband_status_link_status_read(void) {
	uint32_t word = ethphy_rx_inband_status_read();
	return ethphy_rx_inband_status_link_status_extract(word);
}
#define CSR_ETHPHY_RX_INBAND_STATUS_CLOCK_SPEED_OFFSET 1
#define CSR_ETHPHY_RX_INBAND_STATUS_CLOCK_SPEED_SIZE 1
static inline uint32_t ethphy_rx_inband_status_clock_speed_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ethphy_rx_inband_status_clock_speed_read(void) {
	uint32_t word = ethphy_rx_inband_status_read();
	return ethphy_rx_inband_status_clock_speed_extract(word);
}
#define CSR_ETHPHY_RX_INBAND_STATUS_DUPLEX_STATUS_OFFSET 2
#define CSR_ETHPHY_RX_INBAND_STATUS_DUPLEX_STATUS_SIZE 1
static inline uint32_t ethphy_rx_inband_status_duplex_status_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t ethphy_rx_inband_status_duplex_status_read(void) {
	uint32_t word = ethphy_rx_inband_status_read();
	return ethphy_rx_inband_status_duplex_status_extract(word);
}
#define CSR_ETHPHY_MDIO_W_ADDR (CSR_BASE + 0x1808L)
#define CSR_ETHPHY_MDIO_W_SIZE 1
static inline uint32_t ethphy_mdio_w_read(void) {
	return csr_read_simple((CSR_BASE + 0x1808L));
}
static inline void ethphy_mdio_w_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1808L));
}
#define CSR_ETHPHY_MDIO_W_MDC_OFFSET 0
#define CSR_ETHPHY_MDIO_W_MDC_SIZE 1
static inline uint32_t ethphy_mdio_w_mdc_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethphy_mdio_w_mdc_read(void) {
	uint32_t word = ethphy_mdio_w_read();
	return ethphy_mdio_w_mdc_extract(word);
}
static inline uint32_t ethphy_mdio_w_mdc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ethphy_mdio_w_mdc_write(uint32_t plain_value) {
	uint32_t oldword = ethphy_mdio_w_read();
	uint32_t newword = ethphy_mdio_w_mdc_replace(oldword, plain_value);
	ethphy_mdio_w_write(newword);
}
#define CSR_ETHPHY_MDIO_W_OE_OFFSET 1
#define CSR_ETHPHY_MDIO_W_OE_SIZE 1
static inline uint32_t ethphy_mdio_w_oe_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ethphy_mdio_w_oe_read(void) {
	uint32_t word = ethphy_mdio_w_read();
	return ethphy_mdio_w_oe_extract(word);
}
static inline uint32_t ethphy_mdio_w_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ethphy_mdio_w_oe_write(uint32_t plain_value) {
	uint32_t oldword = ethphy_mdio_w_read();
	uint32_t newword = ethphy_mdio_w_oe_replace(oldword, plain_value);
	ethphy_mdio_w_write(newword);
}
#define CSR_ETHPHY_MDIO_W_W_OFFSET 2
#define CSR_ETHPHY_MDIO_W_W_SIZE 1
static inline uint32_t ethphy_mdio_w_w_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t ethphy_mdio_w_w_read(void) {
	uint32_t word = ethphy_mdio_w_read();
	return ethphy_mdio_w_w_extract(word);
}
static inline uint32_t ethphy_mdio_w_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void ethphy_mdio_w_w_write(uint32_t plain_value) {
	uint32_t oldword = ethphy_mdio_w_read();
	uint32_t newword = ethphy_mdio_w_w_replace(oldword, plain_value);
	ethphy_mdio_w_write(newword);
}
#define CSR_ETHPHY_MDIO_R_ADDR (CSR_BASE + 0x180cL)
#define CSR_ETHPHY_MDIO_R_SIZE 1
static inline uint32_t ethphy_mdio_r_read(void) {
	return csr_read_simple((CSR_BASE + 0x180cL));
}
#define CSR_ETHPHY_MDIO_R_R_OFFSET 0
#define CSR_ETHPHY_MDIO_R_R_SIZE 1
static inline uint32_t ethphy_mdio_r_r_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethphy_mdio_r_r_read(void) {
	uint32_t word = ethphy_mdio_r_read();
	return ethphy_mdio_r_r_extract(word);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x2000L)

/* sdram */
#define CSR_SDRAM_BASE (CSR_BASE + 0x2800L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x2800L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline uint32_t sdram_dfii_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x2800L));
}
static inline void sdram_dfii_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2800L));
}
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
static inline uint32_t sdram_dfii_control_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_control_sel_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_sel_extract(word);
}
static inline uint32_t sdram_dfii_control_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_control_sel_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_sel_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
static inline uint32_t sdram_dfii_control_cke_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_control_cke_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_cke_extract(word);
}
static inline uint32_t sdram_dfii_control_cke_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_control_cke_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_cke_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
static inline uint32_t sdram_dfii_control_odt_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_control_odt_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_odt_extract(word);
}
static inline uint32_t sdram_dfii_control_odt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_control_odt_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_odt_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
static inline uint32_t sdram_dfii_control_reset_n_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_control_reset_n_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_reset_n_extract(word);
}
static inline uint32_t sdram_dfii_control_reset_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_control_reset_n_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_reset_n_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x2804L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x2804L));
}
static inline void sdram_dfii_pi0_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2804L));
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cs_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi0_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_we_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_we_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi0_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_we_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cas_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi0_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_ras_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi0_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_wren_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi0_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_rden_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi0_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cs_top_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cs_top_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cs_top_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cs_top_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void sdram_dfii_pi0_command_cs_top_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cs_top_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cs_bottom_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 7) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cs_bottom_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cs_bottom_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cs_bottom_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 7))) | (mask & plain_value)<< 7 ;
}
static inline void sdram_dfii_pi0_command_cs_bottom_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cs_bottom_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x2808L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x2808L));
}
static inline void sdram_dfii_pi0_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2808L));
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x280cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x280cL));
}
static inline void sdram_dfii_pi0_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x280cL));
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x2810L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x2810L));
}
static inline void sdram_dfii_pi0_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2810L));
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x2814L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2814L));
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2814L));
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x2818L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2818L));
}

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x3000L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x3000L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x3004L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0x3004L));
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3004L));
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x3008L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x3008L));
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3008L));
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x300cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x300cL));
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x300cL));
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x3010L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x3010L));
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x3014L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x3014L));
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
static inline uint32_t timer0_ev_status_zero_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_status_zero_read(void) {
	uint32_t word = timer0_ev_status_read();
	return timer0_ev_status_zero_extract(word);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x3018L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x3018L));
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3018L));
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
static inline uint32_t timer0_ev_pending_zero_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_pending_zero_read(void) {
	uint32_t word = timer0_ev_pending_read();
	return timer0_ev_pending_zero_extract(word);
}
static inline uint32_t timer0_ev_pending_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_pending_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_pending_read();
	uint32_t newword = timer0_ev_pending_zero_replace(oldword, plain_value);
	timer0_ev_pending_write(newword);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x301cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x301cL));
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x301cL));
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1
static inline uint32_t timer0_ev_enable_zero_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_enable_zero_read(void) {
	uint32_t word = timer0_ev_enable_read();
	return timer0_ev_enable_zero_extract(word);
}
static inline uint32_t timer0_ev_enable_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_enable_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_enable_read();
	uint32_t newword = timer0_ev_enable_zero_replace(oldword, plain_value);
	timer0_ev_enable_write(newword);
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x3800L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x3800L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0x3800L));
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3800L));
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x3804L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x3804L));
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x3808L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x3808L));
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x380cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x380cL));
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
static inline uint32_t uart_ev_status_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_status_tx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_tx_extract(word);
}
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
static inline uint32_t uart_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_status_rx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_rx_extract(word);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x3810L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x3810L));
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3810L));
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
static inline uint32_t uart_ev_pending_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_pending_tx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_tx_extract(word);
}
static inline uint32_t uart_ev_pending_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_pending_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_tx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
static inline uint32_t uart_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_pending_rx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_rx_extract(word);
}
static inline uint32_t uart_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_rx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x3814L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3814L));
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3814L));
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
static inline uint32_t uart_ev_enable_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_enable_tx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_tx_extract(word);
}
static inline uint32_t uart_ev_enable_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_enable_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_tx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
static inline uint32_t uart_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_enable_rx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_rx_extract(word);
}
static inline uint32_t uart_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_rx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x3818L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x3818L));
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x381cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x381cL));
}

#endif
